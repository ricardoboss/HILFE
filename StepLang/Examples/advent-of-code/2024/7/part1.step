string? input = fileRead("example.txt")
if (input == null) {
	println("Could not read file")
	return
}

list equations = []
foreach (string line in split(input, "\n")) {
	list parts = split(line, ": ")
	number result = toNumber(parts[0])
	list numbers = converted(split(parts[1], " "), (string x) { return toNumber(x) })
	doAdd(equations, {"result": result, "numbers": numbers})
}

function getResults = (list numbers) {
	list results = []
	number patternId = 0
	while (patternId < length(numbers)) {
		function combiner = getCombiner(numbers, patternId)
		doAdd(results, aggregatePattern(numbers, combiner))
		patternId++
	}

	return results
}

function getCombiner = (list numbers, number depth) {
	if (depth == 0) {
		return (number a, number b, number idx) { return a + b }
	} else if (depth == 1) {
		return (number a, number b, number idx) { return a * b }
	} else {
		return (number a, number b, number idx) {
			if (idx % 2 == 0) {
				return getCombiner(numbers, depth - 1)
			}

			return getCombiner(numbers, depth - 2)
		}
	}
}

function aggregatePattern = (list numbers, function combiner) {
	number i = 1
	number result = numbers[0]
	while (i < length(numbers)) {
		result = combiner(result, numbers[i], i)
		i++
	}

	return result
}

number sumSolvable = 0
foreach (map equation in equations) {
	number expectedResult = equation["result"]
	list calculatedResults = getResults(equation["numbers"])

	if (contains(calculatedResults, expectedResult)) {
		sumSolvable += expectedResult
	}
}

println(sumSolvable)
