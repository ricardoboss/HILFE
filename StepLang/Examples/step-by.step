string? sourceCode = "println(\"number: \", 123)"
//string? sourceCode = null
if (sourceCode == null) {
	println("Could not read source code")
	return 0
}

list digits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
list lowercaseLetters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
list uppercaseLetters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

list letters = []

foreach (string? letter in lowercaseLetters) {
	doAdd(letters, letter)
}

foreach (string? letter in uppercaseLetters) {
	doAdd(letters, letter)
}

string character
string? identifier = null
number index = 0
while (index < length(sourceCode)) {
	character = sourceCode[index]

	// ignore whitespace
	if (character == " ") {
		index++
		continue
	}

	if (contains(digits, character)) {
		// parse number
		string n = ""
		while (contains(digits, character) || character == ".") {
			n = n + character
			index++
			character = sourceCode[index]
		}
		number parsedNumber = toNumber(n)
		println("parsed number: ", parsedNumber)
		continue
	}

	if (character == "\"") {
		// parse string
		string s = ""
		index++
		character = sourceCode[index]
		while (character != "\"") {
			s = s + character
			index++
			character = sourceCode[index]
		}
		println("parsed string: \"", s, "\"")
		index++
		continue
	}

	if (character == "(") {
		println("parsed left parenthesis")
		index++
		continue
	}

	if (character == ")") {
		println("parsed right parenthesis")
		index++
		continue
	}

	if (character == ",") {
		println("parsed comma")
		index++
		continue
	}

	if (identifier == null) {
		// parse identifier
		identifier = ""
		while (contains(lowercaseLetters, character) || contains(uppercaseLetters, character) || contains(digits, character) || character == "_") {
			identifier = identifier + character
			index++
			character = sourceCode[index]
		}

		println("parsed identifier: ", identifier)

		identifier = null
		continue
	}

	println("Unknown character: ", character)
	index++
}