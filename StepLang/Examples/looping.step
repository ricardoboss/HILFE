number i = 0

while (i != 10) {
	print(i, EOL)
	i++
}

print("done", EOL)

// declare a variable inside the scope a loop
while (i > 0) {
	number j = i
	while (j > 0) {
		number k = j ** 2
		print(k, EOL)
		j--
	}
	i--
}

// use truthy value as condition
i = 3
while (i) {
	print(i, EOL)
	i--
}

println(i, " is falsey")

list l = [1, 2, 3, 4]

// iterate over the list values
foreach (number n in l) {
	print(n, EOL)
}

// iterate over the list values and keys
foreach (number k: number v in l) {
	print(k, ": ", v, EOL)
}

map m = {"a": 1, "b": 2, "c": 3}

// iterate over the map values
foreach (number n2 in m) {
	print(n2, EOL)
}

// iterate over the map values and keys
foreach (string k2: number v2 in m) {
	print(k2, ": ", v2, EOL)
}

// declare key and value variables before usage
string k3
number v3
foreach (k3: v3 in m) {
	print(k3, ": ", v3, EOL)
}

// call a function with another foreach loop
list nums = [1, 2, 3, 4, 5]
function f = (number x) {
	foreach (number n in [x]) {
		println(n)
	}
}

foreach (number x in nums) {
	f(x)
	println(x)
}

println("break out of a loop")
while (true) {
	break

	println("should not get printed")
}

println("continue to the next iteration")
foreach (number n in [1, 2, 3, 4, 5]) {
	if (n == 3) {
		continue

		println("should not get printed")
	}

	println(n)
}

println("nested continue")
foreach (number n in [1, 2, 3, 4, 5]) {
	foreach (number n2 in [1, 2, 3, 4, 5]) {
		if (n2 >= 3) {
			continue

			println("should not get printed")
		}

		println("inner: ", n2)
	}

	if (n >= 3) {
		println("outer (skipped): ", n)

		continue

		println("should not get printed")
	}

	println("outer: ", n)
}

println("nested break")
foreach (number n in [1, 2, 3, 4, 5]) {
	foreach (number n2 in [1, 2, 3, 4, 5]) {
		if (n2 == 3) {
			break

			println("should not get printed")
		}

		println("inner: ", n2)
	}

	if (n == 3) {
		println("outer (skipped): ", n)

		break

		println("should not get printed")
	}

	println("outer: ", n)
}
